{
    "name": "ProposalContract",
    "structs": {
        "Proposal": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "title",
                "type": "string"
            },
            {
                "name": "description",
                "type": "string"
            },
            {
                "name": "amount_required",
                "type": "uint64"
            },
            {
                "name": "created_by",
                "type": "address"
            },
            {
                "name": "donations",
                "type": "(address,uint64)[]"
            },
            {
                "name": "amount_raised",
                "type": "uint64"
            },
            {
                "name": "milestones",
                "type": "(string,uint64,string,uint64,uint64,uint64,bool,uint64,uint64)[]"
            },
            {
                "name": "current_milestone",
                "type": "uint64"
            },
            {
                "name": "created_at",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "create_proposal",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "string",
                    "name": "title"
                },
                {
                    "type": "string",
                    "name": "description"
                },
                {
                    "type": "uint64",
                    "name": "amount_required"
                },
                {
                    "type": "(string,uint64)[]",
                    "name": "milestones"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "donate_proposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id"
                },
                {
                    "type": "pay",
                    "name": "payment"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "submit_proof",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id"
                },
                {
                    "type": "string",
                    "name": "proof_link"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "vote_milestone",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id"
                },
                {
                    "type": "bool",
                    "name": "vote"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claim_milestone",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "refund_if_inactive",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "no_of_proposals": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "bm9PZlByb3Bvc2Fscw=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "proposals": {
                    "keyType": "uint64",
                    "valueType": "Proposal",
                    "prefix": "cHJvcG9zYWxz"
                },
                "milestoneVotes": {
                    "keyType": "uint64",
                    "valueType": "address[]",
                    "prefix": "bWlsZXN0b25lVm90ZXNf"
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1041
                    ],
                    "errorMessage": "All milestones already completed"
                },
                {
                    "pc": [
                        681
                    ],
                    "errorMessage": "Amount required must be greater than 0"
                },
                {
                    "pc": [
                        688
                    ],
                    "errorMessage": "At least one milestone is required"
                },
                {
                    "pc": [
                        1368
                    ],
                    "errorMessage": "Creator cannot vote"
                },
                {
                    "pc": [
                        858
                    ],
                    "errorMessage": "Goal already reached"
                },
                {
                    "pc": [
                        1010
                    ],
                    "errorMessage": "Goal not reached yet"
                },
                {
                    "pc": [
                        571,
                        600,
                        849,
                        854,
                        993,
                        1001,
                        1006,
                        1081,
                        1293,
                        1347,
                        1362,
                        1442,
                        1446,
                        1653,
                        1733,
                        1889,
                        1981,
                        1986
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        692
                    ],
                    "errorMessage": "Maximum of 5 milestones allowed"
                },
                {
                    "pc": [
                        1730
                    ],
                    "errorMessage": "Milestone already claimed"
                },
                {
                    "pc": [
                        1716
                    ],
                    "errorMessage": "Milestone not approved"
                },
                {
                    "pc": [
                        135,
                        150,
                        165,
                        183,
                        201,
                        226
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        999
                    ],
                    "errorMessage": "Only creator can submit proof"
                },
                {
                    "pc": [
                        874
                    ],
                    "errorMessage": "Payment must be sent to the contract address"
                },
                {
                    "pc": [
                        1385,
                        1692
                    ],
                    "errorMessage": "Proof is not submitted yet"
                },
                {
                    "pc": [
                        1698
                    ],
                    "errorMessage": "Proof not submitted yet"
                },
                {
                    "pc": [
                        713
                    ],
                    "errorMessage": "Proposal description cannot be empty"
                },
                {
                    "pc": [
                        844,
                        985,
                        1242,
                        1610,
                        1833
                    ],
                    "errorMessage": "Proposal doesn't exist"
                },
                {
                    "pc": [
                        699
                    ],
                    "errorMessage": "Proposal name cannot be empty"
                },
                {
                    "pc": [
                        706
                    ],
                    "errorMessage": "Proposal title cannot be empty"
                },
                {
                    "pc": [
                        676
                    ],
                    "errorMessage": "Total milestone amount must equal the required amount"
                },
                {
                    "pc": [
                        1393
                    ],
                    "errorMessage": "Voting period has ended"
                },
                {
                    "pc": [
                        1705
                    ],
                    "errorMessage": "Voting period not ended yet"
                },
                {
                    "pc": [
                        1351
                    ],
                    "errorMessage": "You have already voted for this milestone"
                },
                {
                    "pc": [
                        1465
                    ],
                    "errorMessage": "You have not donated to this proposal"
                },
                {
                    "pc": [
                        258
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        138,
                        153,
                        168,
                        186,
                        204,
                        229
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1320
                    ],
                    "errorMessage": "check self.milestoneVotes entry exists"
                },
                {
                    "pc": [
                        528,
                        824
                    ],
                    "errorMessage": "check self.no_of_proposals exists"
                },
                {
                    "pc": [
                        847,
                        991,
                        1248,
                        1538,
                        1613,
                        1763,
                        1804,
                        1839
                    ],
                    "errorMessage": "check self.proposals entry exists"
                },
                {
                    "pc": [
                        217
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}